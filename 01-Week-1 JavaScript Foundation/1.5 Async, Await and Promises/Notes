// 1.5 | Async, Await and Promises
// 1. Async functions vs sync functions
// 2. Real use of callbacks
// 3. JS Browsers architecture
// 4. Promises
// 5. Async await

// 1. Synchronous and Asynchronous 
// a. Synchronous -
// ->sequential only one thing is happening at a time.
// ->Together, One after the other.


// b. Asynchronous - 
// ->Multiple things are context switching with each other.
// ->Happens in part.

// eg:-
// ->Human brain and body in single threaded.
// ->We can only do one thing at a time.
// ->But we can context switch b/w tasks, we can delegate tasks to other people.

// Can Js delegate and context switching?
// ->Yes by using Asynchronous functions.


// 2. Asynchronous functions vs Synchronous functions

// a. Synchrnous functions-
// ->In case of synchronous function we have to wait for tasks to execute. then can we go for to other tasks.
// eg-1:
// function 
// ->Thread executes the code synchronously.

// eg-1:
// function findSum(n){
//     let sum=0;
//     for(let i=0;i<n;i++){
//         sum=sum+1;
//     }
//     return sum;
// }
// console.log(findSum(10));

// b.  Asynchronous functions-
// ->In case Asynchronus function a task can deligated to other thread to perform.
// ->Context is done in asyncrhonous function.
// ->Net amount of time taken to a task can be decreased by doing delegating and context switching.


// eg-1:
// Reading files from file system.



// 3. Asynchronous function Exmaples
// a. setTimeout function it runs specific function after some duration.
// b. fs.readFile- to read a file from your filesystem.
// c. Fetch - to fetch some data from API end point.


// a. setTimeout function
// ->it is global function.
// ->setTime function is asynchronous function.
// ->it runs specific function after some duration.
// ->it is pre made function.

// ->In below code setTimeout functions calls findSumTill10 function. findSumTill10 Calls find sum function.

// function findSum(n){
//     let sum=0;
//     for(let i=0;i<n;i++){
//         sum=sum+i;
//     }
//     return sum;
// }

// function findSumTill10(){
//     console.log(findSum(10));
// }

// // Calling asynchronous function
// setTimeout(findSumTill10,2*1000);
// console.log("hello Wolrd");

// // Output:
// // hello Wolrd
// // 45

// ->first hello wold prints then sum of n get prinited afterwards.

// // =>Synchronously sleeping the thread
// ->Making Asyncronous thread to synchronous.
// function findSum(n){
//     let sum=0;
//     for(let i=0;i<n;i++){
//         sum=sum+i;
//     }
//     return sum;
// }

// function findSumTill10(){
//     console.log(findSum(10));
// }
// // Busy waiting

// function syncSleep(){
//     let a=0;
//     for(let i=0;i<1000000000;i++){
//         a++;
//     }
// }

// syncSleep();
// findSumTill10();

// // Calling asynchronous function
// setTimeout(findSumTill10,2*1000);
// console.log("hello Wolrd");

// // Output:
// // 45
// // Async.js:60 hello Wolrd

// ->sum prints first
// ->syncSleep makes setTimeout to sleep for some secs.

// b. fs.readFile- to read a specific file from your filesystem.
// ->using js file is runned locally then js file can read other files like text, mp4, json in system.

// ->It delegate the task to other thread it reads the file.
// eg-1:
// ->require('fs)
// ->'fs'- it is file system module.
// ->requiring external library called fs.
// ->it is node.js library.
// ->it do few things like reading file, wriitng file.

// // Syntax:
// // fs.readFile("file name","encoding", Anonymous function(err,data){
// //     console.log(data);

// // })

// // eg-1:
// const fs=require('fs');

// // file system module

// fs.readFile("text.tx","utf-8",function(err,data){
//     console.log(data);
// });

// Output:
// hello world this is my text file.

// // ->fs.readFile file read the text file in that gap the "hi there" get prints first.
// // ->"hi there" executes first then fs.readFile get executed.

// eg-2:
// const fs=require('fs');

// fs.readFile("text.tx","utf-8",function(err,data){
//     console.log(data);
// })

// console.log("hi there 1")

// let a=0;
// for(let i=0;i<100000000;i++){
//     a++;
// }

// console.log("hi there 2")

// Output:
// hi there 1
// hi there 2
// hello world this is my text file.


// ->thread deligate task at line 163 and it continues to execute.



// c. Fetch - to fetch some data from API end point.

// ->If code is synchronous no need worry about web API's, callback Queue
// ->Call back functions make sense for Asynchronous function.

//=>4. Promises
// eg-1:Asynchronous example
// function findSum(n){
//     let sum=0;
//     for(let i=0;i<n;i++){
//         sum=sum+i;
//     }
//     return sum;
// }

// function findSumTill10(){
//     console.log(findSum(10));
// }

// // Calling asynchronous function
// setTimeout(findSumTill10,2*1000);
// console.log("hello Wolrd");

//->Above code is ugly. promises are syntactical sugar that makes this code slightly more readable.


// 4.1 How can we create an asynchronous function of our own?

// ->It is just a wrapper on top of another async function, which is fine.
// ->Usually all async functions you will write will be on top ofJS provided async functions like setTimeout or fs.readFile
//->Until now, we’ve only used other people’s asynchronous functions.



// eg-1:->It is ugly way to create asynchronous function.

// const fs=require('fs');


// function readFile(cb){
//   fs.readFile("text.tx","utf-8",function(err,data){
//      cb(data);
//   });
// }


// // callback function to call
// function onDone(data){
//   console.log(data)
// }


// // calling the function

// readFile(onDone);



// 4.2 How Asynchronous callback happens in JS?
// Timmy,Simmy
// ->Timmy gives her a task and a call back function.
// ->simmy done the task and puts result in callback queue.
// ->event loop pick it.
// ->Timmy will executes it.


//4.3 Creating our own asynchronouse function using promises.
// ->if promises is used there will be no call backs.
// ->call backs are ugly way to write asynchronous code.

// eg-1:
// ->it creats an object of promise class.
// ->function is the argument for the promise.
// ->function takes resolve as argument.
// ->function is called the promise is retuned to them.
// ->What ever promise is retuned to onDone function.

// const fs=require('fs');

// // file system module
// function ashishReadFile(){
//   console.log("Inside ashishReadFile");
//   return new Promise(function(resolve){
//     console.log("inside promise")
//     fs.readFile("text.txt","utf-8",function(err,data){
//       console.log("inside resolve");
//       resolve(data);
//     });
//   });
  
// }

// function onDone(data){
//   console.log(data);
// }

// // ashishReadFile().then(onDone);
// //  or
// let a=ashishReadFile(); //Promise is retuned to function
// a.then(onDone); //giving returned value to onDone function so that it prints


// console.log("hi there")

// Output:
// inside ashishReadFile
// inside promise
// inside resolve
// hi there
// hello world this is my text file.

// 4.4 What even is a promise?
// ->it is just a class that makes callbacks and async function slightly more readable.

let p=new Promise();
console.log(p);




